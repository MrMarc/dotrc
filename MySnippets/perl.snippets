snippet sigvar "Format a Signiant variable"
my $${1:var} = ModifyInputValue( <<'__${1/\w/\U$0\E/g}__', 0 );
${VISUAL}$0
__${1/\w/\U$0\E/g}__

endsnippet

snippet input "Format a new style Signiant variable - style 2"
$inputContext{${1:var}} = ModifyInputValue( <<'__${1/\w/\U$0\E/g}__', 0 );
${VISUAL}$0
__${1/\w/\U$0\E/g}__

endsnippet

snippet dif "die if"
die("${1:var}\n")
  if (${2:var});

endsnippet

global !p
import re

def complete(t, opts):
  if t:
    opts = [ m[len(t):] for m in opts if m.startswith(t) ]
  if len(opts) == 1:
    return opts[0]
  return '('+'|'.join(opts)+')'

def insideValidate(t):
  pattern = re.compile("^(\\$inputContext\\{(.*?)\\}).*?",re.MULTILINE)

  retText = ''
  dieLines = '\t# Test the values\n'
  splLines = '\t# Output the values\n'
  if t:
    for (match,text) in re.findall(pattern, t):
      splLines += '\tSigPrintLog("'+text+': [' + match + ']",LOGINFO);\n'
      dieLines += '\tdie("No '+text+' provided\\n")\n\t\tif (' + match + ' eq \'\');\n'
    retText = dieLines + "\n" + splLines

  return retText
endglobal

snippet SPL "Format a SigPrintLog line"
SigPrintLog( "${VISUAL}$1", LOG$2`!p snip.rv=complete( t[2], ['INFO','ERROR','WARN','DEBUG'])` );
endsnippet

snippet SSO "Send a Signiant output"
SigSetOutput( "${VISUAL}$1", GetUtf8String($2));
endsnippet

snippet udd "Use Data::Dumper"
use Data::Dumper;
endsnippet

snippet dbstop "Make the debugger stop automatically"
$DB::signal = 1;
endsnippet

snippet hered
my $${1:var} =<<"__${1/\w/\U$0\E/g}__";
${VISUAL}$2
__${1/\w/\U$0\E/g}__
endsnippet

snippet it
it '${1:text}' => sub {
    $2
};
endsnippet

snippet trap
trap{$1};
endsnippet

snippet like
like($1,qr/$2/);
endsnippet

snippet desc
describe '${1:text}' => sub {
    $2
};
endsnippet

snippet ok
ok($1,$2);
endsnippet

snippet bef
before sub {
    $1;
};
endsnippet

snippet beach
before each => sub {
    $1;
};
endsnippet

snippet valid "Create a validateInputs function"
${VISUAL}$0
`!p snip.rv = 'sub validateInputs($) {\n\tmy $inputs = $_[0];\n\n' + insideValidate(snip.v.text) + '\n\treturn $inputs\n}\n'`
endsnippet

snippet getsigxml
sub getSigXMLElements {
    my ($xmlFL) = @_;
    my @fileList;

    if (!IsSigListXmlFormat($xmlFL)) {
        # SourceData is in legacy format...
        $xmlFL =~ s/,\\s+/,/g; # in case it comes in as comma-space instead of just comma
        @fileList = SolutionSplitPaths($xmlFL,',');
    } else {
        # Deconstruct SigXML file
        my $XMLPathListType = '';
        my $Xattrs          = '';

        my @elementArray = ();

        # Unpack it into an array
        die("Input file list is not parseable\n")
          if ( SigListXMLParse( $xmlFL, \\$XMLPathListType, \@elementArray, \\$Xattrs ) );

        @fileList =  SigListGetELementsByAttribute( \@elementArray, 'V' );
    }

    # return the ref
    return \@fileList;
}
endsnippet
